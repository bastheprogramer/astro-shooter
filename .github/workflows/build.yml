name: Build and Package AstroShooter

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10 (Windows)
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies (Windows)
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pyinstaller pyglet numpy numba

      - name: Lint with flake8 (Windows)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests with pytest (Windows)
        run: pytest

      - name: Build Windows Executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed `
            --add-data "sprites;sprites" `
            --add-data "sounds;sounds" `
            main.py
          Move-Item -Path "dist\main.exe" -Destination "dist\main_windows.exe"

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: AstroShooter-Windows
          path: dist\main_windows.exe

  build-macos-universal:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10 (macOS)
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies (arm64)
        run: |
          export MACOSX_DEPLOYMENT_TARGET=10.13
          python -m pip install --upgrade pip
          pip install flake8 pytest pyinstaller pyglet numpy numba

      - name: Lint with flake8 (macOS arm64)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests with pytest (macOS arm64)
        run: pytest

      - name: Build arm64 binary
        run: |
          export MACOSX_DEPLOYMENT_TARGET=10.13
          pyinstaller --onefile --windowed --add-data "sprites:sprites" --add-data "sounds:sounds" main.py
          mv dist/main dist/main_arm64

      - name: Clean build artifacts before x86_64 build
        run: |
          rm -rf build dist __pycache__

      - name: Build x86_64 binary
        run: |
          export MACOSX_DEPLOYMENT_TARGET=10.13
          # Force pip upgrade and rebuild numpy, numba, and llvmlite for x86_64
          arch -x86_64 python -m pip install --upgrade pip
          arch -x86_64 pip uninstall -y numpy numba llvmlite
          arch -x86_64 pip install --force-reinstall --no-binary :all: numpy
          arch -x86_64 pip install --force-reinstall --no-binary :all: numba llvmlite
          # Install remaining dependencies for x86_64
          arch -x86_64 pip install flake8 pytest pyinstaller pyglet
          # Build the binary in x86_64 mode
          arch -x86_64 pyinstaller --onefile --windowed --add-data "sprites:sprites" --add-data "sounds:sounds" main.py
          mv dist/main dist/main_x86_64

      - name: Create Universal Binary
        run: |
          mkdir -p dist
          lipo -create -output dist/main_universal dist/main_arm64 dist/main_x86_64
          file dist/main_universal

      - name: Upload Universal Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: AstroShooter-macOS-Univ
          path: dist/main_universal
