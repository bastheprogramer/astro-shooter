name: Build and Package AstroShooter

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pyinstaller pyglet numpy numba

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests with pytest
        run: pytest

      - name: Build Windows Executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed `
            --add-data "sprites;sprites" `
            --add-data "sounds;sounds" `
            main.py

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: AstroShooter-Windows
          path: dist\main.exe
  build-macos-universal:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pyinstaller pyglet numpy numba

      - name: Build arm64 binary
        run: |
          export MACOSX_DEPLOYMENT_TARGET=10.13
          pyinstaller --onefile --windowed --add-data "sprites:sprites" --add-data "sounds:sounds" main.py
          mv dist/main dist/main_arm64

      - name: Clean build artifacts
        run: |
          rm -rf build dist __pycache__

      - name: Build x86_64 binary
        run: |
          export MACOSX_DEPLOYMENT_TARGET=10.13
          # Force x86_64 build using 'arch -x86_64'
          arch -x86_64 pyinstaller --onefile --windowed --add-data "sprites:sprites" --add-data "sounds:sounds" main.py
          mv dist/main dist/main_x86_64

      - name: Create Universal Binary
        run: |
          mkdir -p dist
          lipo -create -output dist/main_universal dist/main_arm64 dist/main_x86_64
          file dist/main_universal

      - name: Upload Universal Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: AstroShooter-macOS-Univ
          path: dist/main_universal
